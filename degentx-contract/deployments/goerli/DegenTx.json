{
  "address": "0x568cD537Ed5C70aE1A2b1B0Fd6DE6D94c7FAdD77",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        }
      ],
      "name": "CreatedInvoice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "PaidInvoice",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "contractVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountDue",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "payTo",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsDue",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "ethBlockExpiresAt",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "expecteduuid",
          "type": "bytes32"
        }
      ],
      "name": "createAndPayInvoice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "invoiceUUID",
          "type": "bytes32"
        }
      ],
      "name": "getInvoiceDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "invoiceUUID",
          "type": "bytes32"
        }
      ],
      "name": "getInvoiceEthBlockPaidAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "invoiceUUID",
          "type": "bytes32"
        }
      ],
      "name": "getInvoicePayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "invoiceUUID",
          "type": "bytes32"
        }
      ],
      "name": "getInvoiceTokenCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountDue",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "payTo",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsDue",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        }
      ],
      "name": "getInvoiceUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "invoiceUUID",
          "type": "bytes32"
        }
      ],
      "name": "invoiceWasCreated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "invoiceUUID",
          "type": "bytes32"
        }
      ],
      "name": "invoiceWasPaid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "invoices",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "created",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountDue",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "paidBy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ethBlockPaidAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethBlockExpiresAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0c1d1c4dd0a83413915af2e0d6de02f1048594d29c819b5960c9256a21b11dbf",
  "receipt": {
    "to": null,
    "from": "0xB11ca87E32075817C82Cc471994943a4290f4a14",
    "contractAddress": "0x568cD537Ed5C70aE1A2b1B0Fd6DE6D94c7FAdD77",
    "transactionIndex": 109,
    "gasUsed": "1267440",
    "logsBloom": "0x
    "blockHash": "0x7c893c2733f838d7f43e8b0b5f7ea954c1d38c66c88938c7929566273779b87f",
    "transactionHash": "0x0c1d1c4dd0a83413915af2e0d6de02f1048594d29c819b5960c9256a21b11dbf",
    "logs": [
      {
        "transactionIndex": 109,
        "blockNumber": 8721723,
        "transactionHash": "0x0c1d1c4dd0a83413915af2e0d6de02f1048594d29c819b5960c9256a21b11dbf",
        "address": "0x568cD537Ed5C70aE1A2b1B0Fd6DE6D94c7FAdD77",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b11ca87e32075817c82cc471994943a4290f4a14"
        ],
        "data": "0x",
        "logIndex": 202,
        "blockHash": "0x7c893c2733f838d7f43e8b0b5f7ea954c1d38c66c88938c7929566273779b87f"
      }
    ],
    "blockNumber": 8721723,
    "cumulativeGasUsed": "16294909",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "be7c3d5c03323ca2a158c0cfddc5e663",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"}],\"name\":\"CreatedInvoice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"PaidInvoice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountDue\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"payTo\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsDue\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"ethBlockExpiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"expecteduuid\",\"type\":\"bytes32\"}],\"name\":\"createAndPayInvoice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"invoiceUUID\",\"type\":\"bytes32\"}],\"name\":\"getInvoiceDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"invoiceUUID\",\"type\":\"bytes32\"}],\"name\":\"getInvoiceEthBlockPaidAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"invoiceUUID\",\"type\":\"bytes32\"}],\"name\":\"getInvoicePayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"invoiceUUID\",\"type\":\"bytes32\"}],\"name\":\"getInvoiceTokenCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountDue\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"payTo\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsDue\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"getInvoiceUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"invoiceUUID\",\"type\":\"bytes32\"}],\"name\":\"invoiceWasCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"invoiceUUID\",\"type\":\"bytes32\"}],\"name\":\"invoiceWasPaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"invoices\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountDue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paidBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethBlockPaidAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethBlockExpiresAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DegenTx.sol\":\"DegenTx\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DegenTx.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/*\\nPAYSPEC: Atomic and deterministic invoicing system\\n\\nGenerate offchain invoices based on sell-order data and allow users to fulfill those order invoices onchain.\\n\\n*/\\n \\n\\nimport \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\n\\n\\n  \\ncontract DegenTx is Ownable, ReentrancyGuard {\\n\\n  uint256 public immutable contractVersion  = 100;\\n  address immutable ETHER_ADDRESS = address(0x0000000000000000000000000000000000000010);\\n  \\n  mapping(bytes32 => Invoice) public invoices; \\n\\n  bool lockedByOwner = false; \\n\\n  event CreatedInvoice(bytes32 uuid); \\n  event PaidInvoice(bytes32 uuid, address from);\\n\\n\\n  struct Invoice {\\n    bytes32 uuid;\\n    string description;\\n    uint256 nonce;\\n    bool created;\\n\\n\\n    address token;\\n   \\n    uint256 totalAmountDue;\\n    \\n    address[] payTo;\\n    uint[] amountsDue;\\n    \\n\\n    address paidBy;\\n    uint256 ethBlockPaidAt;\\n\\n\\n    uint256 ethBlockExpiresAt;\\n\\n  }\\n\\n\\n\\n  constructor(   ) {\\n\\n  } \\n \\n\\n  function lockContract() public onlyOwner {\\n    lockedByOwner = true;\\n  }\\n\\n\\n   \\n\\n\\n  function createAndPayInvoice(  string memory description, uint256 nonce, address token,  uint256 totalAmountDue,address[] memory payTo, uint[] memory amountsDue, uint256 ethBlockExpiresAt, bytes32 expecteduuid  ) \\n    public \\n    payable \\n    nonReentrant\\n    returns (bool) {\\n     \\n     if(token == ETHER_ADDRESS){\\n       require(msg.value == totalAmountDue, \\\"Transaction sent incorrect ETH amount.\\\");\\n     }else{\\n       require(msg.value == 0, \\\"Transaction sent ETH for an ERC20 invoice.\\\");\\n     }\\n     \\n     bytes32 newuuid = _createInvoice(description,nonce,token,totalAmountDue,payTo,amountsDue,ethBlockExpiresAt,expecteduuid);\\n    \\n     return _payInvoice(newuuid);\\n  }\\n\\n   function _createInvoice(  string memory description, uint256 nonce, address token, uint256 totalAmountDue, address[] memory payTo, uint[] memory amountsDue, uint256 ethBlockExpiresAt, bytes32 expecteduuid ) \\n    private \\n    returns (bytes32 uuid) { \\n\\n\\n      bytes32 newuuid = getInvoiceUUID(description, nonce, token, totalAmountDue, payTo, amountsDue,  ethBlockExpiresAt ) ;\\n\\n      require(!lockedByOwner);\\n      require( newuuid == expecteduuid , \\\"Invalid invoice uuid\\\");\\n      require( invoices[newuuid].uuid == 0 );  //make sure you do not overwrite invoices\\n      require(payTo.length == amountsDue.length, \\\"Invalid number of amounts due\\\");\\n\\n      require(ethBlockExpiresAt == 0 || block.number < ethBlockExpiresAt);\\n\\n      invoices[newuuid] = Invoice({\\n       uuid:newuuid,\\n       description:description,\\n       nonce: nonce,\\n       token: token,\\n\\n       totalAmountDue: totalAmountDue,\\n\\n       payTo: payTo,\\n       amountsDue: amountsDue,\\n       \\n       paidBy: address(0),\\n        \\n       ethBlockPaidAt: 0,\\n       ethBlockExpiresAt: ethBlockExpiresAt,\\n       created:true\\n      });\\n\\n\\n       emit CreatedInvoice(newuuid);\\n\\n       return newuuid;\\n   }\\n\\n   function _payInvoice( bytes32 invoiceUUID ) private returns (bool) {\\n\\n       address from = msg.sender;\\n\\n       require(!lockedByOwner);\\n       require( invoices[invoiceUUID].uuid == invoiceUUID ); //make sure invoice exists\\n       require( invoiceWasPaid(invoiceUUID) == false ); \\n\\n\\n       uint256 amountsDueSum = 0;\\n\\n\\n       for(uint i=0;i<invoices[invoiceUUID].payTo.length;i++){\\n              uint amtDue = invoices[invoiceUUID].amountsDue[i];\\n              amountsDueSum += amtDue; \\n\\n              //transfer each fee to fee recipient\\n              require(  _payTokenAmount(invoices[invoiceUUID].token , from , invoices[invoiceUUID].payTo[i], amtDue ) , \\\"Unable to pay amount due.\\\" );\\n       } \\n\\n       require(amountsDueSum == invoices[invoiceUUID].totalAmountDue, \\\"Invalid Total Amount Due\\\");\\n      \\n       invoices[invoiceUUID].paidBy = from;\\n\\n       invoices[invoiceUUID].ethBlockPaidAt = block.number;\\n \\n\\n\\n       emit PaidInvoice(invoiceUUID, from);\\n\\n       return true;\\n\\n\\n   }\\n\\n\\n   function _payTokenAmount(address tokenAddress, address from, address to, uint256 tokenAmount) \\n      internal \\n      returns (bool) {\\n      \\n      if(tokenAddress == ETHER_ADDRESS){\\n        payable(to).transfer( tokenAmount ); \\n      }else{ \\n        IERC20( tokenAddress  ).transferFrom( from ,  to, tokenAmount  );\\n      }\\n      return true;\\n   }\\n\\n\\n\\n   function getInvoiceUUID(  string memory description, uint256 nonce, address token,  uint256 totalAmountDue, address[] memory payTo, uint[] memory amountsDue, uint expiresAt  ) public view returns (bytes32 uuid) {\\n\\n         address payspecContractAddress = address(this); //prevent from paying through the wrong contract\\n\\n         bytes32 newuuid = keccak256( abi.encodePacked(payspecContractAddress, description, nonce, token, totalAmountDue, payTo, amountsDue,  expiresAt ) );\\n\\n         return newuuid;\\n    }\\n\\n \\n\\n   function invoiceWasCreated( bytes32 invoiceUUID ) public view returns (bool){\\n\\n       return invoices[invoiceUUID].created ;\\n   }\\n\\n   function invoiceWasPaid( bytes32 invoiceUUID ) public view returns (bool){\\n\\n       return invoices[invoiceUUID].ethBlockPaidAt > 0 ;\\n   }\\n\\n\\n    function getInvoiceDescription( bytes32 invoiceUUID ) public view returns (string memory){\\n\\n       return invoices[invoiceUUID].description;\\n   }\\n\\n   function getInvoiceTokenCurrency( bytes32 invoiceUUID ) public view returns (address){\\n\\n       return invoices[invoiceUUID].token;\\n   }\\n\\n\\n   function getInvoicePayer( bytes32 invoiceUUID ) public view returns (address){\\n\\n       return invoices[invoiceUUID].paidBy;\\n   }\\n\\n   function getInvoiceEthBlockPaidAt( bytes32 invoiceUUID ) public view returns (uint){\\n\\n       return invoices[invoiceUUID].ethBlockPaidAt;\\n   }\\n\\n \\n\\n\\n}\\n\",\"keccak256\":\"0xb070d886489ef4296fe12806f20bb777c148d2526642f094d76135beaea54aa9\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526064608052601060a0526003805460ff1916905534801561002457600080fd5b5061002e33610037565b60018055610087565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60805160a0516115136100b3600039600081816103680152610cec0152600061026001526115136000f3fe6080604052600436106100dd5760003560e01c80638f65cc571161007f578063b85398e411610059578063b85398e4146102b5578063bf9d9688146102e7578063f2fde38b14610307578063f8a8a0761461032757600080fd5b80638f65cc5714610221578063a0a8e4601461024e578063aede70961461028257600080fd5b80636e76dc5f116100bb5780636e76dc5f14610199578063715018a6146101d7578063753868e3146101ee5780638da5cb5b1461020357600080fd5b8063401de830146100e257806355f471621461013857806366b08ad514610176575b600080fd5b3480156100ee57600080fd5b5061011b6100fd366004610f0f565b6000908152600260205260409020600701546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014457600080fd5b50610168610153366004610f0f565b60009081526002602052604090206008015490565b60405190815260200161012f565b6101896101843660046110ec565b61035c565b604051901515815260200161012f565b3480156101a557600080fd5b5061011b6101b4366004610f0f565b60009081526002602052604090206003015461010090046001600160a01b031690565b3480156101e357600080fd5b506101ec61049d565b005b3480156101fa57600080fd5b506101ec6104b1565b34801561020f57600080fd5b506000546001600160a01b031661011b565b34801561022d57600080fd5b5061024161023c366004610f0f565b6104c8565b60405161012f9190611208565b34801561025a57600080fd5b506101687f000000000000000000000000000000000000000000000000000000000000000081565b34801561028e57600080fd5b5061018961029d366004610f0f565b60009081526002602052604090206003015460ff1690565b3480156102c157600080fd5b506101896102d0366004610f0f565b600090815260026020526040902060080154151590565b3480156102f357600080fd5b50610168610302366004611222565b61056d565b34801561031357600080fd5b506101ec6103223660046112d8565b6105ba565b34801561033357600080fd5b50610347610342366004610f0f565b610633565b60405161012f999897969594939291906112f3565b6000610366610715565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b031603610407578534146104025760405162461bcd60e51b815260206004820152602660248201527f5472616e73616374696f6e2073656e7420696e636f727265637420455448206160448201526536b7bab73a1760d11b60648201526084015b60405180910390fd5b610468565b34156104685760405162461bcd60e51b815260206004820152602a60248201527f5472616e73616374696f6e2073656e742045544820666f7220616e2045524332604482015269181034b73b37b4b1b29760b11b60648201526084016103f9565b600061047a8a8a8a8a8a8a8a8a61076e565b905061048581610a01565b91505061049160018055565b98975050505050505050565b6104a5610c3e565b6104af6000610c98565b565b6104b9610c3e565b6003805460ff19166001179055565b60008181526002602052604090206001018054606091906104e890611353565b80601f016020809104026020016040519081016040528092919081815260200182805461051490611353565b80156105615780601f1061053657610100808354040283529160200191610561565b820191906000526020600020905b81548152906001019060200180831161054457829003601f168201915b50505050509050919050565b6000803090506000818a8a8a8a8a8a8a6040516020016105949897969594939291906113c0565b60408051808303601f1901815291905280516020909101209a9950505050505050505050565b6105c2610c3e565b6001600160a01b0381166106275760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103f9565b61063081610c98565b50565b6002602052600090815260409020805460018201805491929161065590611353565b80601f016020809104026020016040519081016040528092919081815260200182805461068190611353565b80156106ce5780601f106106a3576101008083540402835291602001916106ce565b820191906000526020600020905b8154815290600101906020018083116106b157829003601f168201915b505050600284015460038501546004860154600787015460088801546009909801549697939660ff841696506001600160a01b036101009094048416955091939216919089565b6002600154036107675760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103f9565b6002600155565b6000806107808a8a8a8a8a8a8a61056d565b60035490915060ff161561079357600080fd5b8281146107d95760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081a5b9d9bda58d9481d5d5a5960621b60448201526064016103f9565b600081815260026020526040902054156107f257600080fd5b84518651146108435760405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964206e756d626572206f6620616d6f756e74732064756500000060448201526064016103f9565b83158061084f57508343105b61085857600080fd5b6040518061016001604052808281526020018b81526020018a8152602001600115158152602001896001600160a01b0316815260200188815260200187815260200186815260200160006001600160a01b031681526020016000815260200185815250600260008381526020019081526020016000206000820151816000015560208201518160010190805190602001906108f4929190610de7565b5060408201516002820155606082015160038201805460808501516001600160a01b031661010002610100600160a81b0319931515939093166001600160a81b03199091161791909117905560a0820151600482015560c08201518051610965916005840191602090910190610e6b565b5060e08201518051610981916006840191602090910190610ec0565b506101008201516007820180546001600160a01b0319166001600160a01b039092169190911790556101208201516008820155610140909101516009909101556040518181527fc7ef264b3f844cbb14c2236b9e9682cdb5827cb89858ad61f7d3e7df566ec4c79060200160405180910390a19998505050505050505050565b600354600090339060ff1615610a1657600080fd5b6000838152600260205260409020548314610a3057600080fd5b60008381526002602052604090206008015415610a4c57600080fd5b6000805b600085815260026020526040902060050154811015610b63576000858152600260205260408120600601805483908110610a8c57610a8c61145e565b906000526020600020015490508083610aa5919061148a565b6000878152600260205260409020600381015460059091018054929550610b04926101009092046001600160a01b03169187919086908110610ae957610ae961145e565b6000918252602090912001546001600160a01b031684610ce8565b610b505760405162461bcd60e51b815260206004820152601960248201527f556e61626c6520746f2070617920616d6f756e74206475652e0000000000000060448201526064016103f9565b5080610b5b816114a2565b915050610a50565b506000848152600260205260409020600401548114610bc45760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420546f74616c20416d6f756e7420447565000000000000000060448201526064016103f9565b6000848152600260209081526040918290206007810180546001600160a01b0319166001600160a01b038716908117909155436008909201919091558251878152918201527f8c312afe1806eaa44098445e756760724a25f74268c8e3b29276b885713247d0910160405180910390a15060019392505050565b6000546001600160a01b031633146104af5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b031603610d5f576040516001600160a01b0384169083156108fc029084906000818181858888f19350505050158015610d59573d6000803e3d6000fd5b50610ddc565b6040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528616906323b872dd906064016020604051808303816000875af1158015610db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dda91906114bb565b505b506001949350505050565b828054610df390611353565b90600052602060002090601f016020900481019282610e155760008555610e5b565b82601f10610e2e57805160ff1916838001178555610e5b565b82800160010185558215610e5b579182015b82811115610e5b578251825591602001919060010190610e40565b50610e67929150610efa565b5090565b828054828255906000526020600020908101928215610e5b579160200282015b82811115610e5b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610e8b565b828054828255906000526020600020908101928215610e5b5791602002820182811115610e5b578251825591602001919060010190610e40565b5b80821115610e675760008155600101610efb565b600060208284031215610f2157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610f6757610f67610f28565b604052919050565b600082601f830112610f8057600080fd5b813567ffffffffffffffff811115610f9a57610f9a610f28565b610fad601f8201601f1916602001610f3e565b818152846020838601011115610fc257600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b0381168114610ff657600080fd5b919050565b600067ffffffffffffffff82111561101557611015610f28565b5060051b60200190565b600082601f83011261103057600080fd5b8135602061104561104083610ffb565b610f3e565b82815260059290921b8401810191818101908684111561106457600080fd5b8286015b848110156110865761107981610fdf565b8352918301918301611068565b509695505050505050565b600082601f8301126110a257600080fd5b813560206110b261104083610ffb565b82815260059290921b840181019181810190868411156110d157600080fd5b8286015b8481101561108657803583529183019183016110d5565b600080600080600080600080610100898b03121561110957600080fd5b883567ffffffffffffffff8082111561112157600080fd5b61112d8c838d01610f6f565b995060208b0135985061114260408c01610fdf565b975060608b0135965060808b013591508082111561115f57600080fd5b61116b8c838d0161101f565b955060a08b013591508082111561118157600080fd5b5061118e8b828c01611091565b93505060c0890135915060e089013590509295985092959890939650565b60005b838110156111c75781810151838201526020016111af565b838111156111d6576000848401525b50505050565b600081518084526111f48160208601602086016111ac565b601f01601f19169290920160200192915050565b60208152600061121b60208301846111dc565b9392505050565b600080600080600080600060e0888a03121561123d57600080fd5b873567ffffffffffffffff8082111561125557600080fd5b6112618b838c01610f6f565b985060208a0135975061127660408b01610fdf565b965060608a0135955060808a013591508082111561129357600080fd5b61129f8b838c0161101f565b945060a08a01359150808211156112b557600080fd5b506112c28a828b01611091565b92505060c0880135905092959891949750929550565b6000602082840312156112ea57600080fd5b61121b82610fdf565b60006101208b835280602084015261130d8184018c6111dc565b604084019a909a52505095151560608701526001600160a01b03948516608087015260a0860193909352921660c084015260e08301919091526101009091015292915050565b600181811c9082168061136757607f821691505b60208210810361138757634e487b7160e01b600052602260045260246000fd5b50919050565b60008151602080840160005b838110156113b557815187529582019590820190600101611399565b509495945050505050565b60006bffffffffffffffffffffffff19808b60601b168352895160206113ec8260148701838f016111ac565b81850191508a6014830152828a60601b1660348301528860488301526068820192508751915080880160005b8381101561143d5781516001600160a01b031685529382019390820190600101611418565b5050611449838861138d565b9586529094019b9a5050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561149d5761149d611474565b500190565b6000600182016114b4576114b4611474565b5060010190565b6000602082840312156114cd57600080fd5b8151801515811461121b57600080fdfea26469706673582212203981c7c70b568067ef70225a9f2de500cc713d9245e03f332f6b075d3f14b67a64736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 825,
        "contract": "contracts/DegenTx.sol:DegenTx",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 941,
        "contract": "contracts/DegenTx.sol:DegenTx",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 22,
        "contract": "contracts/DegenTx.sol:DegenTx",
        "label": "invoices",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Invoice)60_storage)"
      },
      {
        "astId": 25,
        "contract": "contracts/DegenTx.sol:DegenTx",
        "label": "lockedByOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Invoice)60_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DegenTx.Invoice)",
        "numberOfBytes": "32",
        "value": "t_struct(Invoice)60_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Invoice)60_storage": {
        "encoding": "inplace",
        "label": "struct DegenTx.Invoice",
        "members": [
          {
            "astId": 37,
            "contract": "contracts/DegenTx.sol:DegenTx",
            "label": "uuid",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 39,
            "contract": "contracts/DegenTx.sol:DegenTx",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 41,
            "contract": "contracts/DegenTx.sol:DegenTx",
            "label": "nonce",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 43,
            "contract": "contracts/DegenTx.sol:DegenTx",
            "label": "created",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 45,
            "contract": "contracts/DegenTx.sol:DegenTx",
            "label": "token",
            "offset": 1,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 47,
            "contract": "contracts/DegenTx.sol:DegenTx",
            "label": "totalAmountDue",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 50,
            "contract": "contracts/DegenTx.sol:DegenTx",
            "label": "payTo",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 53,
            "contract": "contracts/DegenTx.sol:DegenTx",
            "label": "amountsDue",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 55,
            "contract": "contracts/DegenTx.sol:DegenTx",
            "label": "paidBy",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 57,
            "contract": "contracts/DegenTx.sol:DegenTx",
            "label": "ethBlockPaidAt",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 59,
            "contract": "contracts/DegenTx.sol:DegenTx",
            "label": "ethBlockExpiresAt",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}